 -- procedure: quotient n1 n2
 -- procedure: remainder n1 n2
 -- procedure: modulo n1 n2
     These procedures implement number-theoretic (integer) division.
     N2 should be non-zero.  All three procedures return integers.  If
     N1/N2 is an integer:

         (quotient N1 N2)                   ==> N1/N2
         (remainder N1 N2)                  ==> 0
         (modulo N1 N2)                     ==> 0

     If N1/N2 is not an integer:

         (quotient N1 N2)                   ==> N_Q
         (remainder N1 N2)                  ==> N_R
         (modulo N1 N2)                     ==> N_M

     where N_Q is N1/N2 rounded towards zero, 0 < |N_R| < |N2|, 0 <
     |N_M| < |N2|, N_R and N_M differ from N1 by a multiple of N2, N_R
     has the same sign as N1, and N_M has the same sign as N2.

     From this we can conclude that for integers N1 and N2 with N2 not
     equal to 0,

          (= N1 (+ (* N2 (quotient N1 N2))
                (remainder N1 N2)))
                                            ==>  #t

     provided all numbers involved in that computation are exact.

     (modulo 13 4)                          ==>  1
     (remainder 13 4)                       ==>  1

     (modulo -13 4)                         ==>  3
     (remainder -13 4)                      ==>  -1

     (modulo 13 -4)                         ==>  -3
     (remainder 13 -4)                      ==>  1

     (modulo -13 -4)                        ==>  -1
     (remainder -13 -4)                     ==>  -1

     (remainder -13 -4.0)                   ==>  -1.0  ; inexact


 -- library procedure: gcd n1 ...,
 -- library procedure: lcm n1 ...,
     These procedures return the greatest common divisor or least common
     multiple of their arguments.  The result is always non-negative.

     (gcd 32 -36)                           ==>  4
     (gcd)                                  ==>  0
     (lcm 32 -36)                           ==>  288
     (lcm 32.0 -36)                         ==>  288.0  ; inexact
     (lcm)                                  ==>  1


 -- procedure: numerator Q
 -- procedure: denominator Q
     These procedures return the numerator or denominator of their
     argument; the result is computed as if the argument was
     represented as a fraction in lowest terms.  The denominator is
     always positive.  The denominator of 0 is defined to be 1.

     (numerator (/ 6 4))                    ==>  3
     (denominator (/ 6 4))                  ==>  2
     (denominator
       (exact->inexact (/ 6 4)))            ==> 2.0


 -- procedure: floor x
 -- procedure: ceiling x
 -- procedure: truncate x
 -- procedure: round x
     These procedures return integers.  `Floor' returns the largest
     integer not larger than X.  `Ceiling' returns the smallest integer
     not smaller than X.  `Truncate' returns the integer closest to X
     whose absolute value is not larger than the absolute value of X.
     `Round' returns the closest integer to X, rounding to even when X
     is halfway between two integers.

          _Rationale:_ `Round' rounds to even for consistency with the
          default rounding mode specified by the IEEE floating point
          standard.

          _Note:_ If the argument to one of these procedures is
          inexact, then the result will also be inexact.  If an exact
          value is needed, the result should be passed to the
          `inexact->exact' procedure.

     (floor -4.3)                           ==>  -5.0
     (ceiling -4.3)                         ==>  -4.0
     (truncate -4.3)                        ==>  -4.0
     (round -4.3)                           ==>  -4.0

     (floor 3.5)                            ==>  3.0
     (ceiling 3.5)                          ==>  4.0
     (truncate 3.5)                         ==>  3.0
     (round 3.5)                            ==>  4.0  ; inexact

     (round 7/2)                            ==>  4    ; exact
     (round 7)                              ==>  7


 -- library procedure: rationalize x y
     `Rationalize' returns the _simplest_ rational number differing
     from X by no more than Y.  A rational number r_1 is _simpler_
     than another rational number r_2 if r_1 = p_1/q_1 and r_2 =
     p_2/q_2 (in lowest terms) and |p_1|<= |p_2| and |q_1| <= |q_2|.
     Thus 3/5 is simpler than 4/7.  Although not all rationals are
     comparable in this ordering (consider 2/7 and 3/5) any interval
     contains a rational number that is simpler than every other
     rational number in that interval (the simpler 2/5 lies between 2/7
     and 3/5).  Note that 0 = 0/1 is the simplest rational of all.

     (rationalize
       (inexact->exact .3) 1/10)            ==> 1/3    ; exact
     (rationalize .3 1/10)                  ==> #i1/3  ; inexact


 -- procedure: make-rectangular x1 x2
 -- procedure: make-polar x3 x4
 -- procedure: real-part Z
 -- procedure: imag-part Z
 -- procedure: magnitude Z
 -- procedure: angle Z
     These procedures are part of every implementation that supports
     general complex numbers.  Suppose X1, X2, X3, and X4 are real
     numbers and Z is a complex number such that

                         Z = X1 + X2i = X3 . e^i X4

     Then

     (make-rectangular X1 X2)               ==> Z
     (make-polar X3 X4)                     ==> Z
     (real-part Z)                          ==> X1
     (imag-part Z)                          ==> X2
     (magnitude Z)                          ==> |X3|
     (angle Z)                              ==> x_angle

     where -pi < x_angle <= pi with x_angle = X4 + 2pi n for some
     integer n.

          _Rationale:_ `Magnitude' is the same as `abs' for a real
          argument, but `abs' must be present in all implementations,
          whereas `magnitude' need only be present in implementations
          that support general complex numbers.


 -- procedure: exact->inexact Z
 -- procedure: inexact->exact Z
     `Exact->inexact' returns an inexact representation of Z.  The
     value returned is the inexact number that is numerically closest
     to the argument.  If an exact argument has no reasonably close
     inexact equivalent, then a violation of an implementation
     restriction may be reported.

     `Inexact->exact' returns an exact representation of Z.  The value
     returned is the exact number that is numerically closest to the
     argument.  If an inexact argument has no reasonably close exact
     equivalent, then a violation of an implementation restriction may
     be reported.

     These procedures implement the natural one-to-one correspondence
     between exact and inexact integers throughout an
     implementation-dependent range.  See section *note Implementation
     restrictions::.

6.2.6 Numerical input and output
--------------------------------

 -- procedure: number->string z
 -- procedure: number->string z radix
     RADIX must be an exact integer, either 2, 8, 10, or 16.  If
     omitted, RADIX defaults to 10.  The procedure `number->string'
     takes a number and a radix and returns as a string an external
     representation of the given number in the given radix such that

     (let ((number NUMBER)
           (radix RADIX))
       (eqv? number
             (string->number (number->string number
                                             radix)
                             radix)))

     is true.  It is an error if no possible result makes this
     expression true.

     If Z is inexact, the radix is 10, and the above expression can be
     satisfied by a result that contains a decimal point, then the
     result contains a decimal point and is expressed using the minimum
     number of digits (exclusive of exponent and trailing zeroes)
     needed to make the above expression true [howtoprint], [howtoread];
     otherwise the format of the result is unspecified.

     The result returned by `number->string' never contains an explicit
     radix prefix.

          _Note:_ The error case can occur only when Z is not a complex
          number or is a complex number with a non-rational real or
          imaginary part.

          _Rationale:_ If Z is an inexact number represented using
          flonums, and the radix is 10, then the above expression is
          normally satisfied by a result containing a decimal point.
          The unspecified case allows for infinities, NaNs, and
          non-flonum representations.


 -- procedure: string->number string
 -- procedure: string->number string radix
     Returns a number of the maximally precise representation expressed
     by the given STRING.  RADIX must be an exact integer, either 2, 8,
     10, or 16.  If supplied, RADIX is a default radix that may be
     overridden by an explicit radix prefix in STRING (e.g. "#o177").
     If RADIX is not supplied, then the default radix is 10.  If STRING
     is not a syntactically valid notation for a number, then
     `string->number' returns #f.

     (string->number "100")                 ==>  100
     (string->number "100" 16)              ==>  256
     (string->number "1e2")                 ==>  100.0
     (string->number "15##")                ==>  1500.0

          _Note:_ The domain of `string->number' may be restricted by
          implementations in the following ways.  `String->number' is
          permitted to return #f whenever STRING contains an explicit
          radix prefix.  If all numbers supported by an implementation
          are real, then `string->number' is permitted to return #f
          whenever STRING uses the polar or rectangular notations for
          complex numbers.  If all numbers are integers, then
          `string->number' may return #f whenever the fractional
          notation is used.  If all numbers are exact, then
          `string->number' may return #f whenever an exponent marker or
          explicit exactness prefix is used, or if a # appears in place
          of a digit.  If all inexact numbers are integers, then
          `string->number' may return #f whenever a decimal point is
          used.


6.3 Other data types
====================

This section describes operations on some of Scheme's non-numeric data
types: booleans, pairs, lists, symbols, characters, strings and vectors.

6.3.2 Pairs and lists
---------------------
 -- library procedure: caar pair
 -- library procedure: cadr pair
 --  :          ...
 -- library procedure: cdddar pair
 -- library procedure: cddddr pair
     These procedures are compositions of `car' and `cdr', where for
     example `caddr' could be defined by

     (define caddr (lambda (x) (car (cdr (cdr x))))).

     Arbitrary compositions, up to four deep, are provided.  There are
     twenty-eight of these procedures in all.

 -- library procedure: reverse list
     Returns a newly allocated list consisting of the elements of LIST
     in reverse order.

     (reverse '(a b c))                     ==>  (c b a)
     (reverse '(a (b c) d (e (f))))
               ==>  ((e (f)) d (b c) a)


 -- library procedure: list-tail list K
     Returns the sublist of LIST obtained by omitting the first K
     elements.  It is an error if LIST has fewer than K elements.
     `List-tail' could be defined by

     (define list-tail
       (lambda (x k)
         (if (zero? k)
             x
             (list-tail (cdr x) (- k 1)))))


 -- library procedure: list-ref list K
     Returns the Kth element of LIST.  (This is the same as the car of
     (list-tail LIST K).)  It is an error if LIST has fewer than K
     elements.

     (list-ref '(a b c d) 2)                 ==>  c
     (list-ref '(a b c d)
               (inexact->exact (round 1.8)))
               ==>  c


 -- library procedure: memq obj list
 -- library procedure: memv obj list
 -- library procedure: member obj list
     These procedures return the first sublist of LIST whose car is
     OBJ, where the sublists of LIST are the non-empty lists returned
     by (list-tail LIST K) for K less than the length of LIST.  If OBJ
     does not occur in LIST, then #f (not the empty list) is returned.
     `Memq' uses `eq?' to compare OBJ with the elements of LIST, while
     `memv' uses `eqv?' and `member' uses `equal?'.

     (memq 'a '(a b c))                     ==>  (a b c)
     (memq 'b '(a b c))                     ==>  (b c)
     (memq 'a '(b c d))                     ==>  #f
     (memq (list 'a) '(b (a) c))            ==>  #f
     (member (list 'a)
             '(b (a) c))                    ==>  ((a) c)
     (memq 101 '(100 101 102))              ==>  _unspecified_
     (memv 101 '(100 101 102))              ==>  (101 102)


 -- library procedure: assq obj alist
 -- library procedure: assv obj alist
 -- library procedure: assoc obj alist
     ALIST (for "association list") must be a list of pairs.  These
     procedures find the first pair in ALIST whose car field is OBJ,
     and returns that pair.  If no pair in ALIST has OBJ as its car,
     then #f (not the empty list) is returned.  `Assq' uses `eq?' to
     compare OBJ with the car fields of the pairs in ALIST, while
     `assv' uses `eqv?' and `assoc' uses `equal?'.

     (define e '((a 1) (b 2) (c 3)))
     (assq 'a e)                            ==>  (a 1)
     (assq 'b e)                            ==>  (b 2)
     (assq 'd e)                            ==>  #f
     (assq (list 'a) '(((a)) ((b)) ((c))))
                                            ==>  #f
     (assoc (list 'a) '(((a)) ((b)) ((c))))
                                            ==>  ((a))
     (assq 5 '((2 3) (5 7) (11 13)))
                                            ==>  _unspecified_
     (assv 5 '((2 3) (5 7) (11 13)))
                                            ==>  (5 7)

          _Rationale:_ Although they are ordinarily used as predicates,
          `memq', `memv', `member', `assq', `assv', and `assoc' do not
          have question marks in their names because they return useful
          values rather than just #t or #f.

6.4 Control features
====================

 -- procedure: apply proc arg1 ... args
     PROC must be a procedure and ARGS must be a list.  Calls PROC with
     the elements of the list `(append (list ARG1 ...,) ARGS)' as the
     actual arguments.

     (apply + (list 3 4))                   ==>  7

     (define compose
       (lambda (f g)
         (lambda args
           (f (apply g args)))))

     ((compose sqrt *) 12 75)               ==>  30


 -- library procedure: map proc list1 list2 ...,
     The LISTs must be lists, and PROC must be a procedure taking as
     many arguments as there are lists and returning a single value.
     If more than one LIST is given, then they must all be the same
     length.  `Map' applies PROC element-wise to the elements of the
     LISTs and returns a list of the results, in order.  The dynamic
     order in which PROC is applied to the elements of the LISTs is
     unspecified.

     (map cadr '((a b) (d e) (g h)))
               ==>  (b e h)

     (map (lambda (n) (expt n n))
          '(1 2 3 4 5))
               ==>  (1 4 27 256 3125)

     (map + '(1 2 3) '(4 5 6))              ==>  (5 7 9)

     (let ((count 0))
       (map (lambda (ignored)
              (set! count (+ count 1))
              count)
            '(a b)))                        ==>  (1 2) OR (2 1)


 -- library procedure: for-each proc list1 list2 ...,
     The arguments to `for-each' are like the arguments to `map', but
     `for-each' calls PROC for its side effects rather than for its
     values.  Unlike `map', `for-each' is guaranteed to call PROC on
     the elements of the LISTs in order from the first element(s) to the
     last, and the value returned by `for-each' is unspecified.

     (let ((v (make-vector 5)))
       (for-each (lambda (i)
                   (vector-set! v i (* i i)))
                 '(0 1 2 3 4))
       v)                                   ==>  #(0 1 4 9 16)


 -- library procedure: force promise
     Forces the value of PROMISE (see `delay', section *note Delayed
     evaluation::).  If no value has been computed for the promise,
     then a value is computed and returned.  The value of the promise
     is cached (or "memoized") so that if it is forced a second time,
     the previously computed value is returned.

     (force (delay (+ 1 2)))                ==>  3
     (let ((p (delay (+ 1 2))))
       (list (force p) (force p)))
                                            ==>  (3 3)

     (define a-stream
       (letrec ((next
                 (lambda (n)
                   (cons n (delay (next (+ n 1)))))))
         (next 0)))
     (define head car)
     (define tail
       (lambda (stream) (force (cdr stream))))

     (head (tail (tail a-stream)))
                                            ==>  2

     `Force' and `delay' are mainly intended for programs written in
     functional style.  The following examples should not be considered
     to illustrate good programming style, but they illustrate the
     property that only one value is computed for a promise, no matter
     how many times it is forced.

     (define count 0)
     (define p
       (delay (begin (set! count (+ count 1))
                     (if (> count x)
                         count
                         (force p)))))
     (define x 5)
     p                                      ==>  a promise
     (force p)                              ==>  6
     p                                      ==>  a promise, still
     (begin (set! x 10)
            (force p))                      ==>  6

     Here is a possible implementation of `delay' and `force'.
     Promises are implemented here as procedures of no arguments, and
     `force' simply calls its argument:

     (define force
       (lambda (object)
         (object)))

     We define the expression

     (delay <expression>)

     to have the same meaning as the procedure call

     (make-promise (lambda () <expression>))

     as follows

     (define-syntax delay
       (syntax-rules ()
         ((delay expression)
          (make-promise (lambda () expression))))),

     where `make-promise' is defined as follows:

     (define make-promise
       (lambda (proc)
         (let ((result-ready? #f)
               (result #f))
           (lambda ()
             (if result-ready?
                 result
                 (let ((x (proc)))
                   (if result-ready?
                       result
                       (begin (set! result-ready? #t)
                              (set! result x)
                              result))))))))

          _Rationale:_ A promise may refer to its own value, as in the
          last example above.  Forcing such a promise may cause the
          promise to be forced a second time before the value of the
          first force has been computed.  This complicates the
          definition of `make-promise'.

     Various extensions to this semantics of `delay' and `force' are
     supported in some implementations:

        * Calling `force' on an object that is not a promise may simply
          return the object.

        * It may be the case that there is no means by which a promise
          can be operationally distinguished from its forced value.
          That is, expressions like the following may evaluate to
          either #t or to #f, depending on the implementation:

          (eqv? (delay 1) 1)                ==>  _unspecified_
          (pair? (delay (cons 1 2)))        ==>  _unspecified_

        * Some implementations may implement "implicit forcing," where
          the value of a promise is forced by primitive procedures like
          `cdr' and `+':

          (+ (delay (* 3 7)) 13)            ==>  34



 -- procedure: call-with-current-continuation proc
     PROC must be a procedure of one argument. The procedure
     `call-with-current-continuation' packages up the current
     continuation (see the rationale below) as an "escape procedure"
     and passes it as an argument to PROC.  The escape procedure is a
     Scheme procedure that, if it is later called, will abandon
     whatever continuation is in effect at that later time and will
     instead use the continuation that was in effect when the escape
     procedure was created.  Calling the escape procedure may cause the
     invocation of BEFORE and AFTER thunks installed using
     `dynamic-wind'.  

     The escape procedure accepts the same number of arguments as the
     continuation to the original call to
     call-with-current-continuation.  Except for continuations created
     by the `call-with-values' procedure, all continuations take
     exactly one value.  The effect of passing no value or more than
     one value to continuations that were not created by
     call-with-values is unspecified.

     The escape procedure that is passed to PROC has unlimited extent
     just like any other procedure in Scheme.  It may be stored in
     variables or data structures and may be called as many times as
     desired.

     The following examples show only the most common ways in which
     `call-with-current-continuation' is used.  If all real uses were as
     simple as these examples, there would be no need for a procedure
     with the power of `call-with-current-continuation'.

     (call-with-current-continuation
       (lambda (exit)
         (for-each (lambda (x)
                     (if (negative? x)
                         (exit x)))
                   '(54 0 37 -3 245 19))
         #t))                               ==>  -3

     (define list-length
       (lambda (obj)
         (call-with-current-continuation
           (lambda (return)
             (letrec ((r
                       (lambda (obj)
                         (cond ((null? obj) 0)
                               ((pair? obj)
                                (+ (r (cdr obj)) 1))
                               (else (return #f))))))
               (r obj))))))

     (list-length '(1 2 3 4))               ==>  4

     (list-length '(a b . c))               ==>  #f

          _Rationale:_

          A common use of `call-with-current-continuation' is for
          structured, non-local exits from loops or procedure bodies,
          but in fact `call-with-current-continuation' is extremely
          useful for implementing a wide variety of advanced control
          structures.

          Whenever a Scheme expression is evaluated there is a
          "continuation" wanting the result of the expression.  The
          continuation represents an entire (default) future for the
          computation.  If the expression is evaluated at top level,
          for example, then the continuation might take the result,
          print it on the screen, prompt for the next input, evaluate
          it, and so on forever.  Most of the time the continuation
          includes actions specified by user code, as in a continuation
          that will take the result, multiply it by the value stored in
          a local variable, add seven, and give the answer to the top
          level continuation to be printed.  Normally these ubiquitous
          continuations are hidden behind the scenes and programmers do
          not think much about them.  On rare occasions, however, a
          programmer may need to deal with continuations explicitly.
          `Call-with-current-continuation' allows Scheme programmers to
          do that by creating a procedure that acts just like the
          current continuation.

          Most programming languages incorporate one or more
          special-purpose escape constructs with names like exit,
          `return', or even goto.  In 1965, however, Peter Landin
          [Landin65] invented a general purpose escape operator called
          the J-operator.  John Reynolds [Reynolds72] described a
          simpler but equally powerful construct in 1972.  The `catch'
          special form described by Sussman and Steele in the 1975
          report on Scheme is exactly the same as Reynolds's construct,
          though its name came from a less general construct in
          MacLisp.  Several Scheme implementors noticed that the full
          power of the `catch' construct could be provided by a
          procedure instead of by a special syntactic construct, and
          the name `call-with-current-continuation' was coined in 1982.
          This name is descriptive, but opinions differ on the merits
          of such a long name, and some people use the name `call/cc'
          instead.  


 -- procedure: values obj ...
     Delivers all of its arguments to its continuation.  Except for
     continuations created by the `call-with-values' procedure, all
     continuations take exactly one value.  Values might be defined as
     follows:

     (define (values . things)
       (call-with-current-continuation
         (lambda (cont) (apply cont things))))


 -- procedure: call-with-values producer consumer
     Calls its PRODUCER argument with no values and a continuation
     that, when passed some values, calls the CONSUMER procedure with
     those values as arguments.  The continuation for the call to
     CONSUMER is the continuation of the call to call-with-values.

     (call-with-values (lambda () (values 4 5))
                       (lambda (a b) b))
                                                        ==>  5

     (call-with-values * -)                             ==>  -1


 -- procedure: dynamic-wind before thunk after
     Calls THUNK without arguments, returning the result(s) of this
     call.  BEFORE and AFTER are called, also without arguments, as
     required by the following rules (note that in the absence of calls
     to continuations captured using `call-with-current-continuation'
     the three arguments are called once each, in order).  BEFORE is
     called whenever execution enters the dynamic extent of the call to
     THUNK and AFTER is called whenever it exits that dynamic extent.
     The dynamic extent of a procedure call is the period between when
     the call is initiated and when it returns.  In Scheme, because of
     `call-with-current-continuation', the dynamic extent of a call may
     not be a single, connected time period.  It is defined as follows:

        * The dynamic extent is entered when execution of the body of
          the called procedure begins.

        * The dynamic extent is also entered when execution is not
          within the dynamic extent and a continuation is invoked that
          was captured (using `call-with-current-continuation') during
          the dynamic extent.

        * It is exited when the called procedure returns.

        * It is also exited when execution is within the dynamic extent
          and a continuation is invoked that was captured while not
          within the dynamic extent.


     If a second call to `dynamic-wind' occurs within the dynamic
     extent of the call to THUNK and then a continuation is invoked in
     such a way that the AFTERs from these two invocations of
     `dynamic-wind' are both to be called, then the AFTER associated
     with the second (inner) call to `dynamic-wind' is called first.

     If a second call to `dynamic-wind' occurs within the dynamic
     extent of the call to THUNK and then a continuation is invoked in
     such a way that the BEFOREs from these two invocations of
     `dynamic-wind' are both to be called, then the BEFORE associated
     with the first (outer) call to `dynamic-wind' is called first.

     If invoking a continuation requires calling the BEFORE from one
     call to `dynamic-wind' and the AFTER from another, then the AFTER
     is called first.

     The effect of using a captured continuation to enter or exit the
     dynamic extent of a call to BEFORE or AFTER is undefined.

     (let ((path '())
           (c #f))
       (let ((add (lambda (s)
                    (set! path (cons s path)))))
         (dynamic-wind
           (lambda () (add 'connect))
           (lambda ()
             (add (call-with-current-continuation
                    (lambda (c0)
                      (set! c c0)
                      'talk1))))
           (lambda () (add 'disconnect)))
         (if (< (length path) 4)
             (c 'talk2)
             (reverse path))))

               ==> (connect talk1 disconnect
                    connect talk2 disconnect)


6.5 Eval
========

 -- procedure: eval expression environment-specifier
     Evaluates EXPRESSION in the specified environment and returns its
     value.  EXPRESSION must be a valid Scheme expression represented
     as data, and ENVIRONMENT-SPECIFIER must be a value returned by one
     of the three procedures described below.  Implementations may
     extend `eval' to allow non-expression programs (definitions) as
     the first argument and to allow other values as environments, with
     the restriction that `eval' is not allowed to create new bindings
     in the environments associated with `null-environment' or
     `scheme-report-environment'.

     (eval '(* 7 3) (scheme-report-environment 5))
                                                        ==>  21

     (let ((f (eval '(lambda (f x) (f x x))
                    (null-environment 5))))
       (f + 10))
                                                        ==>  20


6.6 Input and output
====================

6.6.1 Ports
-----------

Ports represent input and output devices.  To Scheme, an input port is a
Scheme object that can deliver characters upon command, while an output
port is a Scheme object that can accept characters.  

 -- library procedure: call-with-input-file string proc
 -- library procedure: call-with-output-file string proc
     STRING should be a string naming a file, and PROC should be a
     procedure that accepts one argument.  For `call-with-input-file',
     the file should already exist; for `call-with-output-file', the
     effect is unspecified if the file already exists. These procedures
     call PROC with one argument: the port obtained by opening the
     named file for input or output.  If the file cannot be opened, an
     error is signalled.  If PROC returns, then the port is closed
     automatically and the value(s) yielded by the PROC is(are)
     returned.  If PROC does not return, then the port will not be
     closed automatically unless it is possible to prove that the port
     will never again be used for a read or write operation.

          _Rationale:_ Because Scheme's escape procedures have
          unlimited extent, it  is possible to escape from the current
          continuation but later to escape back in.  If implementations
          were permitted to close the port on any escape from the
          current continuation, then it would be impossible to write
          portable code using both `call-with-current-continuation' and
          `call-with-input-file' or `call-with-output-file'.

 -- optional procedure: with-input-from-file string thunk
 -- optional procedure: with-output-to-file string thunk
     STRING should be a string naming a file, and PROC should be a
     procedure of no arguments.  For `with-input-from-file', the file
     should already exist; for `with-output-to-file', the effect is
     unspecified if the file already exists.  The file is opened for
     input or output, an input or output port connected to it is made
     the default value returned by `current-input-port' or
     `current-output-port' (and is used by (read), (write OBJ), and so
     forth), and the THUNK is called with no arguments.  When the THUNK
     returns, the port is closed and the previous default is restored.
     `With-input-from-file' and `with-output-to-file' return(s) the
     value(s) yielded by THUNK.  If an escape procedure is used to
     escape from the continuation of these procedures, their behavior
     is implementation dependent.


6.6.2 Input
-----------

 -- library procedure: read
 -- library procedure: read port
     `Read' converts external representations of Scheme objects into the
     objects themselves.  That is, it is a parser for the nonterminal
     <datum> (see sections *note External representation:: and *note
     Pairs and lists::).  `Read' returns the next object parsable from
     the given input PORT, updating PORT to point to the first
     character past the end of the external representation of the
     object.

     If an end of file is encountered in the input before any
     characters are found that can begin an object, then an end of file
     object is returned.   The port remains open, and further attempts
     to read will also return an end of file object.  If an end of file
     is encountered after the beginning of an object's external
     representation, but the external representation is incomplete and
     therefore not parsable, an error is signalled.

     The PORT argument may be omitted, in which case it defaults to the
     value returned by `current-input-port'.  It is an error to read
     from a closed port.

 -- procedure: char-ready?
 -- procedure: char-ready? port
     Returns #t if a character is ready on the input PORT and returns
     #f otherwise.  If `char-ready' returns #t then the next
     `read-char' operation on the given PORT is guaranteed not to hang.
     If the PORT is at end of file then `char-ready?' returns #t.  PORT
     may be omitted, in which case it defaults to the value returned by
     `current-input-port'.

          _Rationale:_ `Char-ready?' exists to make it possible for a
          program to accept characters from interactive ports without
          getting stuck waiting for input.  Any input editors
          associated with such ports must ensure that characters whose
          existence has been asserted by `char-ready?' cannot be rubbed
          out.  If `char-ready?' were to return #f at end of file, a
          port at end of file would be indistinguishable from an
          interactive port that has no ready characters.


6.6.4 System interface
----------------------

 -- optional procedure: transcript-on filename
 -- optional procedure: transcript-off
     FILENAME must be a string naming an output file to be created. The
     effect of `transcript-on' is to open the named file for output,
     and to cause a transcript of subsequent interaction between the
     user and the Scheme system to be written to the file.  The
     transcript is ended by a call to `transcript-off', which closes the
     transcript file.  Only one transcript may be in progress at any
     time, though some implementations may relax this restriction.  The
     values returned by these procedures are unspecified.
